# Default values for splunk-kubernetes-metrics.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# = Log Level =
# logLevel is to set log level of the Splunk kubernetes metrics collector. Avaiable values are:
# * debug
# * info
# * warn
# * error
# Default value: "info"
logLevel:

rbac:
  # Specifies whether RBAC resources should be created.
  # This should be set to `false` if either:
  # a) RBAC is not enabled in the cluster, or
  # b) you want to create RBAC resources by yourself.
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # This flag specifies if the user wants to use a secret for creating the serviceAccount,
  # which will be used to get the images from a private registry
  usePullSecrets: false

podSecurityPolicy:
  # Specifies whether Pod Security Policy resources should be created.
  # This should be set to `false` if either:
  # a) Pod Security Policies is not enabled in the cluster, or
  # b) you want to create Pod Security Policy resources by yourself.
  create: false

# = Splunk HEC Connection =
splunk:
  # Configurations for HEC (HTTP Event Collector)
  hec:
    # hostname/ip of HEC, REQUIRED.
    host:
    # port to HEC, OPTIONAL. Default value: 8088
    port:
    # the HEC token, REQUIRED.
    token:
    # protocol has two options: "http" and "https". Default value: "https"
    protocol:
    # indexName tells which index to use, OPTIONAL. If it's not present, the default index configured in HEC will be used.
    indexName:
    # insecureSSL is a boolean, it indecates should it allow inscure SSL connection (when protocol is "https"). Default value: false
    insecureSSL:
    # The PEM-format CA certificate for this client.
    # NOTE: The content of the certificate itself should be used here, not the file path.
    #       The certificate will be stored as a secret in kubernetes.
    clientCert:
    # The private key for this client.
    # NOTE: The content of the key itself should be used here, not the file path.
    #       The key will be stored as a secret in kubernetes.
    clientKey:
    # The PEM-format CA certificate file.
    # NOTE: The content of the file itself should be used here, not the file path.
    #       The file will be stored as a secret in kubernetes.
    caFile:

# Create or use existing secret if name is empty default name is used
secret:
  create: true
  name:

# Defines which version of image to use, and how it should be pulled.
image:
  # The domain of the registry to pull the image from
  registry: docker.io
  # The name of the image to pull
  name: splunk/k8s-metrics
  # The tag of the image to pull
  tag: 1.1.4
  # The policy that specifies when the user wants the images to be pulled
  pullPolicy: Always
  # Indicates if the image should be pulled using authentication from a secret
  usePullSecret: false
  # The name of the pull secret to attach to the respective serviceaccount used to pull the image
  pullsecretName:

# Defines which version of image to use, and how it should be pulled.
imageAgg:
  # The domain of the registry to pull the image from
  registry: docker.io
  # The name of the image to pull
  name: splunk/k8s-metrics-aggr
  # The tag of the image to pull
  tag: 1.1.4
  # The policy that specifies when the user wants the images to be pulled
  pullPolicy: Always
  # Indicates if the image should be pulled using authentication from a secret
  usePullSecret: false
  # The name of the pull secret to attach to the respective serviceaccount used to pull the image
  pullsecretName:

# Controls the resources used by the fluentd daemonset
resources:
  fluent:
    limits:
      cpu: 200m
      memory: 300Mi
    requests:
      cpu: 200m
      memory: 300Mi
  # Controls the output buffer for fluentd for the metrics pod
  # Note that, for memory buffer, if `resources.sidecar.limits.memory` is set,
  # the total buffer size should not bigger than the memory limit, it should also
  # consider the basic memory usage by fluentd itself.
  # All buffer parameters (except Argument) defined in
  # https://docs.fluentd.org/v1.0/articles/buffer-section#parameters
  # can be configured here.
buffer:
  "@type": memory
  total_limit_size: 400m
  chunk_limit_size: 100m
  chunk_limit_records: 10000
  flush_interval: 5s
  flush_thread_count: 1
  overflow_action: block
  retry_max_times: 3

  # Controls the output buffer for fluentd for the metrics aggregator pod
aggregatorBuffer:
  "@type": memory
  total_limit_size: 400m
  chunk_limit_size: 100m
  chunk_limit_records: 10000
  flush_interval: 5s
  flush_thread_count: 1
  overflow_action: block
  retry_max_times: 3

# Configure how often SCK pulls metrics for its kubenetes sources. 15s is the default where 's' is seconds.
metricsInterval: 15s

# Defines which nodes should be selected to deploy the fluentd daemonset.
nodeSelector:
  beta.kubernetes.io/os: linux

# This default tolerations allow the daemonset to be deployed on master nodes,
# so that we can also collect metrics from those nodes.
tolerations:
  - key: node-role.kubernetes.io/master
    effect: NoSchedule

# Tolerations for the aggregator pod. We do not really want this running on the master nodes, so we leave this
# blank by default.
aggregatorTolerations: {}

# Defines priorityClassName to assign a priority class to pods.
priorityClassName:

# Defines node affinity to restrict pod deployment.
affinity: {}

# = Kubernetes Connection Configs =
kubernetes:
  # The hostname or IP address that kubelet will use to connect to. If not supplied, status.hostIP of the node is used to fetch metrics from the Kubelet API (via the $KUBERNETES_NODE_IP environment variable).
  # Default is "#{ENV['KUBERNETES_NODE_IP']}"
  kubeletAddress:
  # The port that kubelet is listening on. Default is 10250
  kubeletPort:
  # The port that is used to get the metrics using apiserver proxy using ssl for the metrics aggregator
  kubeletPortAggregator:
  # This option is used to get the metrics from summary api on each kubelet using ssl
  useRestClientSSL: true
  # if insecureSSL is set to true, insecure HTTPS API call is allowed, default false
  insecureSSL: false
  # Path to the CA file.
  caFile:
  # Path to the file contains the API token. By default it reads from the file "token" in the `secret_dir`.
  bearerTokenFile:
  # Path of the location where pod's service account's credentials are stored. Usually you don't need to care about this config, the default value should work in most cases.
  secretDir:
  # The cluster name used to tag cluster metrics from the aggregator. Default is cluster_name
  clusterName:

# `customFilters` defines the custom filters to be used.
# This section can be used to define custom filters using plugins like https://github.com/splunk/fluent-plugin-jq
# Its also possible to use other filters like https://www.fluentd.org/plugins#filter
#
# The scheme to define a custom filter is:
#
# ```
# <name>:
#   tag: <fluentd tag for the filter>
#   type: <fluentd filter type>
#   body: <definition of the fluentd filter>
# ```
#
# = fluentd tag for the filter =
# This is the fluentd tag for the record
#
# = fluentd filter type =
# This is the fluentd filter that the user wants to use for record manipulation.
#
# = definition of the fluentd filter =
# This defines the body/logic for using the filter for record manipulation.
#
# For example if you want to define a filter which sets cluster_name field to "my_awesome_cluster" you would the following filter
# <filter tail.containers.**>
#  @type jq_transformer
#  jq '.record.cluster_name = "my_awesome_cluster" | .record'
# </filter>
# This can be defined in the customFilters section as follows:
# ```
# customFilters:
#   NamespaceSourcetypeFilter:
#     tag: tail.containers.**
#     type: jq_transformer
#     body: jq '.record.cluster_name = "my_awesome_cluster" | .record'
# ```
customFilters: {}

# Global configurations
# These configurations will be used if the corresponding local configurations are not set.
# For example, if `global.logLevel` is set and `logLevel` is not set, `global.logLevel` will be used; if `logLevel` is set, it will be used regardless `global.logLevel` is set or not.
global:
  logLevel: info
  # If local splunk configurations are not present, the global ones will be used (if available)
  splunk:
    # It has exactly the same configs as splunk.hec does
    hec:
      host:
      port: 8088
      token:
      protocol: https
      indexName:
      insecureSSL: false
      clientCert:
      clientKey:
      caFile:
  kubernetes:
    clusterName: "cluster_name"
  prometheus_enabled: true